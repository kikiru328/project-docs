# 다채널 주문서 통합 자동화 시스템

[![Python](https://img.shields.io/badge/Python-3.8%2B-blue.svg)](https://python.org)
[![Flask](https://img.shields.io/badge/Flask-2.0%2B-green.svg)](https://flask.palletsprojects.com)
[![Pandas](https://img.shields.io/badge/Pandas-Latest-orange.svg)](https://pandas.pydata.org)
[![AWS](https://img.shields.io/badge/AWS-Lightsail-yellow.svg)](https://aws.amazon.com/lightsail/)

> **실무 현장 문제를 체험하고 해결한 다채널 커머스 주문 데이터 통합 자동화 시스템**

## 주요성과

| 지표 | 달성값 | 설명 |
|------|--------|------|
| **작업시간 단축** | 4시간 → 10분 (24배) | 일일 주문서 통합 업무 자동화 |
| **처리 정확도** | 오류율 0% | 수작업 누락/중복 문제 완전 해소 |
| **데이터 처리량** | 일평균 100건 | 다중 옵션 주문 자동 통합 |
| **유지보수 효율** | 무배포 대응 | 설정 파일 수정만으로 포맷 변경 적용 |

## 문제 해결

### 핵심 해결 문제

**문제**: CS 담당자가 자사몰과 스마트스토어의 서로 다른 주문서 구조를 수작업으로 통합하여 배송/제조 관리용 통합 파일을 생성하는 과정에서 4시간이 소요되고 누락/중복 오류가 빈발

**해결**: 채널별 데이터 구조 정규화 + 설정 기반 매핑 시스템으로 20초 자동 처리 + 10분 검수 체계 구축

## 시스템 아키텍쳐

```mermaid
graph TD
    A[자사몰 주문서] --> C[Flask 웹 서버]
    B[스마트스토어 주문서] --> C
    C --> D[파일 업로드 검증]
    D --> E[채널별 구조 분석]
    E --> F[데이터 정규화]
    F --> G[메뉴명/옵션명 매핑]
    G --> H[통합 포맷 생성]
    H --> I[배송/제조 관리용 Excel]
    
    J[Excel 매핑 테이블] --> G
    K[JSON 설정 파일] --> G
    L[에러 핸들링] --> M[오류.excel 생성]
```

### 핵심 컴포넌트

- **데이터 정규화 엔진**: Pandas 기반 채널별 상이한 구조 표준화
- **설정 기반 매핑**: Excel/JSON 파일로 메뉴명/옵션명 변환 규칙 관리
- **웹 인터페이스**: Flask + Jinja 기반 원클릭 처리 시스템
- **에러 핸들링**: 처리 오류 시 별도 파일 생성 및 로깅

## 문제 해결

### 일반적 문제

**문제**: 채널사 정책 변경으로 주문서 포맷이 자주 변경됨 → **해결**: 하드코딩에서 설정 파일 기반으로 전환하여 코드 수정 없이 대응

**문제**: CS 담당자(비개발자)가 사용하기 복잡함 → **해결**: 업로드-처리-다운로드 3단계 원클릭 웹 인터페이스 구축

**문제**: 처리 중 오류 발생 시 원인 파악 어려움 → **해결**: 상세 로깅 시스템 + 오류 발생 데이터 별도 Excel 파일 자동 생성

### 성능 최적화 방법

- **메모리 효율성**: Pandas chunksize 활용으로 대용량 파일 처리 최적화
- **처리 속도**: 벡터화 연산으로 반복문 제거하여 처리 시간 단축
- **설정 캐싱**: 매핑 설정 파일을 메모리에 캐시하여 반복 로드 방지
- **에러 분리**: 정상 데이터와 오류 데이터 분리 처리로 전체 작업 중단 방지

## 확장 가능성

### 신규 채널 추가
- 쿠팡, 11번가 등 추가 채널 통합 시 설정 파일만 추가하면 코드 수정 없이 확장 가능
- 채널별 독립적 처리 로직으로 상호 영향 없이 확장

### 기능 고도화
- RESTful API 아키텍처로 전환하여 외부 시스템 연동 지원
- 실시간 주문 데이터 동기화를 위한 API 기반 연동

## 비즈니스 임팩트

### 운영 효율성
- **시간 절약**: CS 담당자 일일 4시간 업무를 10분으로 단축
- **정확도 향상**: 수작업 오류 완전 제거로 배송/제조 관리 품질 개선
- **인력 효율**: 반복 업무 자동화로 담당자가 고부가가치 업무에 집중 가능

### 기술적 가치
- **유지보수성**: 설정 기반 접근으로 개발자 개입 최소화
- **확장성**: 신규 채널 추가 시 설정만으로 대응 가능한 아키텍처
- **안정성**: 0% 오류율로 데이터 무결성 보장

### 비즈니스 연속성
- **운영 안정화**: 수작업 의존도 제거로 업무 연속성 확보
- **확장 준비**: 다채널 확장 시 즉시 대응 가능한 기반 구축
- **노하우 축적**: 데이터 통합 자동화 경험으로 유사 프로젝트 적용 가능
